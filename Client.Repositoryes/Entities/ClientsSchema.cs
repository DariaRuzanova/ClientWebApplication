// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace DataModel
{
	public static partial class ClientsSchema
	{
		public partial class DataContext
		{
			private readonly IDataContext _dataContext;

			public ITable<Client> Clients => _dataContext.GetTable<Client>();

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}
		}

		[Table("clients", Schema = "clients")]
		public class Client
		{
			[Column("id"  , IsPrimaryKey = true , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int    Id   { get; set; } // integer
			[Column("name", CanBeNull    = false                                                             )] public string Name { get; set; } = null!; // text
		}

		#region Table Extensions
		public static Client? Find(this ITable<Client> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Client?> FindAsync(this ITable<Client> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}
		#endregion
	}
}
